package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;

    private DbIterator child1;

    private DbIterator child2;

    private Tuple currentLeftTuple; // To keep track of the current tuple in the outer loop


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.child1 = child1;

        this.child2 = child2;

        this.p = p;
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name. Can be taken from the appropriate child's TupleDesc.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name. Can be taken from the appropriate child's TupleDesc.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * Should return a TupleDesc that represents the schema for the joined tuples. 
     *@see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
    TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        currentLeftTuple = null;
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
        currentLeftTuple = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        currentLeftTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator later on if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (currentLeftTuple != null || child1.hasNext()) {
            // If currentLeftTuple is null, we need to fetch a new one
            if (currentLeftTuple == null) {
                currentLeftTuple = child1.next();
            }

            // For the current left tuple, try joining with tuples from the right child
            while (child2.hasNext()) {
                Tuple rightTuple = child2.next();
                if (p.filter(currentLeftTuple, rightTuple)) {
                    // Create a new tuple combining the two that passed the predicate
                    TupleDesc combinedDesc = getTupleDesc();
                    Tuple joinedTuple = new Tuple(combinedDesc);

                    // Fill in the fields of the new tuple with the fields of the left and right tuples
                    int i; // Initialize 'i' here for indexing the left tuple fields
                    for (i = 0; i < currentLeftTuple.getTupleDesc().numFields(); i++) {
                        joinedTuple.setField(i, currentLeftTuple.getField(i));
                    }
                    // Now set fields from the right tuple
                    for (int j = 0; j < rightTuple.getTupleDesc().numFields(); j++) {
                        joinedTuple.setField(i + j, rightTuple.getField(j));
                    }
                    return joinedTuple;
                }
            }

            // If we've exhausted all tuples from the right child for the current left tuple
            // we need to move to the next left tuple and reset the right child iterator
            child2.rewind();
            currentLeftTuple = null; // Set to null to fetch the next left tuple in the next iteration
        }

        return null;

    }

    /**
     * See Operator.java for additional notes
     */
    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{child1, child2};
    }

    /**
     * See Operator.java for additional notes
     */
    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length == 2) {
            this.child1 = children[0];
            this.child2 = children[1];
        }
    }

}
